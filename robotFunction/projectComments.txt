	// PROJECT COMMENTS

	1. ADJUST DISTANCE
	2. DROP OFF COLOR 
	3. test adjust distance with drop off new color
	4. SERVO MOTOR FOR BACK
	5. CLASP 
	6. FIX ARM SO IT DOESNT HIT CAMERA WHEN IT GOES UP ----- not sure if its because of power 


--------------------------------------------------------------------------------------------------------------------------------------------------

/*
PID Notes from Eric:

Camera Feedback for Process Variable: 0 to 160.
Desired Set Point: 80
Process Variable is data read from UART

*/

// OLD PID LOOP FOR DISTANCE

float controllerLoop(float setPoint, float processVariable) {
	
	static float prevDError = 0;
	static float prevProportional = 0;
	static float proportionalControl = 0;
	float derror;
	float outputDControl;
	
	prevProportional = proportionalControl;
	derror = setPoint - processVariable;
	proportionalControl = derror * dKp;
	
	// Overflow Check 
	if((prevDError > 0) && (derror > 0) && (prevProportional < 0)){
		proportionalControl = prevProportional;
	}
  if((prevDError < 0) && (derror < 0) && (prevProportional > 0)){
		proportionalControl = prevProportional;
	}

	// Output
	// Output should be a ratio of the two PWMs
	outputDControl = proportionalControl;

	return outputDControl;
	
}

void distancePIDcontrol(float distanceOut) {
	
	
	if (distanceOut < 0) {
		distanceOut = distanceOut * (-1);
		GPIO_PORTB_DATA_R = 0x0A;
	}
	else {
		distanceOut = distanceOut;
		GPIO_PORTB_DATA_R = 0x05;
	}
	
	leftSpeed = floor(distanceOut);
	rightSpeed = floor(distanceOut);
	
	if(leftSpeed < 0) leftSpeed = 2;
	else if (leftSpeed > 15000) leftSpeed = 6000;
	if(rightSpeed < 0) rightSpeed = 2;
	else if (rightSpeed > 15000) rightSpeed = 6000;	
	
	
	
	// Update Speeds
	M0PWM6_Duty(leftSpeed);
	M0PWM7_Duty(rightSpeed);
}
--------------------------------------------------------------------------------------------------------------------------------------------------
	DROP OFF MOVEMENT CODE 
	
	/*
		// Execute Drop Off Movement if Ball count is max
		if (ballCount == 5) {
			// Need to implement a searching algorithm
			
			// If drop off location is found then execute PID Loop on it
			if (dFinalDistance > 12) {
				dMotorSpeed = controlLoop(300, dFinalX, dKp, dKi, dKd);
				motorPIDcontrol(dMotorSpeed);
			}
			else {
				// Change this value to whatever value we need
				if (dFinalDistance > 8) {
				
					// Ensure robot moves forward
					GPIO_PORTD_DATA_R = 0x14;
					
					M0PWM6_Duty(5000);
					M0PWM7_Duty(5000);
				}
				else if (dFinalDistance < 6) {
					
					// Reverse the Car
					GPIO_PORTD_DATA_R = 0x28;
					
					M0PWM6_Duty(5000);
					M0PWM7_Duty(5000);
				}
				else if (dFinalDistance == 6) {
					
					// Execute the Drop Off Movement (Turn Around, Empty Out, Close)
					dropOffMovement();
					
					//Delay2();
					
					// Reset the Ball Count
					//ballCount = 0;
					
					// Start Searching for new Ping Pong Balls
				}
				else {
					
					GPIO_PORTF_DATA_R = 0x08;
					M0PWM6_Duty(3);
					M0PWM7_Duty(3);
				}
			}
		}
		*/
		
		/*
		// PICKING UP BALLS
		// Execute PID Loop if a ball is in view of the camera
		if (finalDistance > 12) {
			motorSpeed = controlLoop(300, finalXCoordinateValue, Kp, Ki, Kd);
			motorPIDcontrol(motorSpeed);
		}
		
		else {
		
			// Update Speeds
			M0PWM6_Duty(3);
			M0PWM7_Duty(3);
			
			GPIO_PORTF_DATA_R = 0x02;
			
			Delay2();
			
			if (finalDistance > 6) {
				
				// Ensure robot moves forward
				
				GPIO_PORTD_DATA_R = 0x14;
				
				M0PWM6_Duty(5000);
				M0PWM7_Duty(5000);
			}
			else if (finalDistance < 6) {
				
				// Reverse the Car
				
				GPIO_PORTD_DATA_R = 0x28;
				
				M0PWM6_Duty(5000);
				M0PWM7_Duty(5000);
			}
			else if (finalDistance == 6) {
				M0PWM6_Duty(3);
				M0PWM7_Duty(3);
				
				// Execute Arm Pick Up Motion
				// pickUpValue = armPickUpLocation(finalXCoordinateValue);
				// armMovement(pickUpValue);
				// Delay2();
				// ballCount++;
			}
			else {
				GPIO_PORTF_DATA_R = 0x08;
				M0PWM6_Duty(3);
				M0PWM7_Duty(3);
			}
		}
		*/
		
		/*
		if (pickUpFlag == 1) {
			// Executes the Pick Up movement 
			GPIO_PORTF_DATA_R = 0x0C;
			
			pickUpValue = armPickUpLocation(finalXCoordinateValue);
			armMovement(pickUpValue);
			GPIO_PORTF_DATA_R = 0x02;
			pickUpFlag = 0;
			uartFlag = 0;
		}
		*/
		
		/*
		else if ( finalDistance <= 20) {
			GPIO_PORTF_DATA_R = 0x04;
			distanceSpeed = controllerLoop(17, finalDistance);
			
			if (distanceSpeed == 0) {
				pickUpFlag = 1;
			}
			
			distancePIDcontrol(distanceSpeed + 2);
		}
		
		else {
			M0PWM6_Duty(3);
			M0PWM7_Duty(3);
		}
		*/
	
------------------------------------------------------------------------------------------------------------------------------------------------------------
	NOTES:
	
	PA7 - PA7 is being used as a port for the LCD and a PWM. Change the PWM signal from PA7 to ____
	
	- Need to add two more PWM signals for the motor
	- Add more PWM Duty cycles for a smoother motion using a single function 


--------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	COMMENTS FROM 10/11/2019
	
	MAKE SURE THE UART COMMUNICATION RESETS THE BUFFER ON BAD DATA
	
	TEST THE PWM FOR PD0 AND PD1

--------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	COMMENTS FROM 9/29/2019
	
	ROBOTIC MOVEMENT COMMENTS 
	
	/* WORKS
	M1PWM3_Init(15625, 320);
	Delay2();
	resetArm();
	Delay2();
	M1PWM3_Duty(550); //Grab
	Delay2();
	dropArm(); // Go to drop off position and drop ball
	GPIO_PORTF_DATA_R = 0x08;
	*/
	
	
	//M0PWM3_Init(40000, 35000); //PB5   SECOND JOINT
	//M0PWM3_Init(40000, 35500); // PB5 HAND - 35500 CLOSE/30000 OPEN 
	//M1PWM3_Init(40000, 20000); //PA7    THIRD JOINT - 20,000 TO GO FORWARD
	//M0PWM3_Init(40000, 21000);   // SECOND JOINT - 7000 TO ORIGINAL POSITION/ 20,000 - 23,000 FOR GOING FORWARD
	
	// Drop State
	//M0PWM1_Init(500000, 35000); //Rotation Joint: Unexpected Value: 8000 for drop off , 20000 for center
	//M0PWM0_Init(500000, 8000); //Joint 3 - Default Height (Good for rotating to drop off) 35000
	
	
	// Reset State (Neutral Forward)
	//M0PWM1_Init(500000, 35000);
	//M0PWM0_Init(500000, 20000);
	
	// Pick Up State
	//M1PWM3_Init(500000, 39000); HAND - 17500 to grab ball / 10000 to Open
	//M0PWM1_Init(500000, 10000); 
	
	// Grabbing (Stage 1)
	//M0PWM1_Init(500000, 20000); //Joint 2 (32
	//M0PWM0_Init(500000, 14000); //Joint 3 (14
	
	// Stage 2
	//M0PWM1_Duty(33750); //Joint 2 (33
	
	// Execute Grab
	//M0PWM3_Init(500000, 17500);
	
	//CHECK SYSDIV64
	//HAND - PA7 (Open 320, Full Close 780, Grab 520)/ Joint 3 - PB7 (Reset - 1850) Range: 400 - 2000 / Joint 2 - PB6 / Joint 1 - PB5
	//M1PWM3_Init(15625, 320); //HAND GRAB ON PA7
	//M0PWM1_Init_new(15625, 250); //JOINT 3 FULLY EXTENDED ON PB7
	//M0PWM0_Init(15625, ); 
	//M1PWM3_Init(15625, 550); //Grab
	//Delay2();
	//M0PWM1_Init_new(15625, 1850); 
	//Delay2();
	//Delay2();
	//M0PWM3_Init(15625, 255); //PB5 - To Drop Poi nt
	//Delay2();
	//M1PWM3_Init(15625, 320); // Drop
	//GPIO_PORTF_DATA_R = 0x04;



	//Reset State SySDiv64 - MAX: 1500 MIN: 250
	//M0PWM1_Init_new(15625, 1100);
	
	
	//Drop State
	//M0PWM1_Init_new(15625, 1100); // Joint 3 -
	//M0PWM0_Init(15625, 250); // Joint 1 - Max: 1500 Min: 250
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------	
ERIC's PID CODE

//PID Example, this is the bare minimum to implement PID safely and correctly
//  It's also not a bad idea to scale all values to be a float bound within 0 to 1
//  example: 8-bit sensor input and 8-bit PWM output
//	Feedback from Sensor = 0 to 255, Output to PWM = 0 to 255, and Setpoint = 128 (50% of max) 
//  Everytime a new Sensor Value is Received:
//		PWMvalue = PID(float(128/255),NewSensorValue()/255) * 255;
//			To Operate Correctly, The Arguments Must Never Be Below 0 or Above 1

//These Coefficients need to be tuned/adjusted for the desired response of the system
#define Kp 0.40 /* Coefficient of Proportional (Values 0 to 1)*/
#define Ki 0.10 /* Coefficient of Integral (Values 0 to 1)*/
#define Kd 0.01 /* Coefficient of Derivative (Values 0 to 1)*/

//SP = SetPoint, the desired operating point, i.e. Position/Velocity/etc...
//PV = ProcessVariable, the feedback from the Plant/System, i.e. DistanceSensor/RPMs/etc...
//MV = ManipulatedVariable, the new value to drive the Plant/System, i.e. PWM value for motor/etc...

float PID(float SP, float PV)
{
	float Error, MV, Derivative;
	static float prevError, Integral, prevIntegral;
	
	SP = 0;					//Get Setpoint
	PV = feedBack(void);	//Get Process Variable
	
	//Calculate Error
	Error = SP - PV;
	
	prevError = Error; //Save a copy for Derivative Calculation
	
	//Calculate Integral Term, we also need to make sure the Integral does not overflow
	//	and if it does overflow we need to disregard that result and use the old value
	prevIntegral = Integral;	//Save a copy of the Integral before we calculate a new one
	//Calculate the new Integral Term, Apply Ki here so we can accumulate more times without overflowing
	Integral = Integral + (Error * Ki);
	//Check if the Integral Calculation Resulted in an Overflow
	if((prevIntegral > 0) && (Error > 0) && (Integral < 0)) //Check if the result had a sign change
		Integral = prevIntegral;	//Overflow Occurred, restore previously calculated integral
	if((prevIntegral < 0) && (Error < 0) && (Integral > 0)) //Check if the result had a sign change
		Integral = prevIntegral;	//Overflow Occurred, restore previously calculated integral
	//Since this PID loop is designed to operate between 0 and 1, we can also keep I from windup problems
	//  by checking it and clamping it -1 or 1
	if(Integral > 1) Integral = 1;
	if(Integral < -1) Integral = -1;
	
	//Calculate Derivative Term
	Derivative = Error - prevError;
	
	//Calculate Manipulated Variable, only one of these should be used
	//P Controller - P only: Rarely Used
	MV = Error * Kp;
	//PI Controller - PI Only: Most Common
	MV = (Error * Kp) + Integral;
	//PID Controller - PID: Common, but be careful as D can add a lot of noise/jitter - Kd should be kept small
	MV = (Error * Kp) + Integral + (Derivative * Kd);
	
	//Add a Bias
	MV = MV + 0.5;
	
	//Lets also make sure MV never falls outside 0 and 1
	if(MV > 1) MV = 1;
	if(MV < 0) MV = 0;
	
	return MV;
}



--------------------------------------------------------------------------------------------------------------------------------------------------------------	